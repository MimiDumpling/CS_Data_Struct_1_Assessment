Runtime:

1. 
    Workload is determined by how many animal crackers (aka scale) are in the box and what method (aka algorithm) you're using to sort through the crackers.

2. 
    O(1)
    O(n)
    O(n^2)
    O(2^n)
    O(log n)
    O(n log n)



Stacks and Queues:

1.1 Stack
1.2 Queue
1.3 Queue

2.1 Ringing up customers at a grocery store.
2.2 The process of brushing teeth. For example) picking toothbrush up from sink, putting toothpaste on toothbrush, brushing teeth, spitting out toothpaste, rinse mouth, place toothbrush back on sink.

3.1 Stacking dishes in a cabinet and taking them out one by one.
3.2 Pulling from the top of a deck of cards and placing cards on a discard pile.



Linked Lists:

1. The nodes of the linked list are the apple node, berry node and cherry node. The data for the apple node is "Apple". The data for the berry node is "Berry". The data for the cherry node is "Cherry". The head of the linked list is pointed at the apple node. There is no explicit tail attribute in the linked list, but it can be assumed that the last node -- the cherry_node -- is the tail.

2. A doubly-linked list has a next attribute (the "next node") and a prev attribute (the "previous node"). A doubly-linked list can traverse forwards and backwards. A singly-linked list has only a next attribute and can only traverse forwards.

3. It's faster to append to a linked list if we keep track of the tail attribute because we can append directly next to the tail without having to traverse from the head. For example) If a list is 1,000 nodes long without a tail attribute, we'd have to traverse through all 1,000 nodes before appending the 1,001 node to the end. This is a runtime of O(n). If we had a tail attribute, we could go directly to the 1,000 node -- without traversing -- and append the 1,001 node to the end. This is a runtime of O(1). 



Trees:

1. food -> Italian -> Indian -> Mexican -> lasagna -> pizza -> tikka masala -> saag -> burritos

2. food -> Mexican -> enchildas -> tacos -> burritos -> Indian -> saag -> tikka masala -> Italian -> pizza -> Sicilian -> New York-style -> Chicago-style 

3. A binary search tree is different from other trees because it doesn't rely on a stack or queue data structure for its search. Each node in a binary search tree will have no more than two children. A binary search tree determines its route based on the value of each node in the order of the arrangement. This means the data in all nodes need to be homogeneous and have an intrinsic way to calculate its value. For example) A binary search tree comprised of words would arrange itself in an alaphabetical manner (hopefully also in a balanced manner). This way, when searching for a word, the algorithm would determine what route to search by comparing its search word to the word on the left fork versus the word on the right fork. If the word on left is "less" than its search word, the algorithm will compare its search word to the word on the right. If the word on the right is "less" than the search word, but "more" than the left word, the algorithm will continue down the right path instead of the left path.























